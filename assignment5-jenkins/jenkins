pipeline {

    agent none

    environment {
        def branch_git        = "main"
        def url_git           = "https://github.com/thinnapat-la/AutomationTest_Assignment_TTB_Spark.git"
        def my_server         = "myserver"
        def main_path         = "/devops/jenkins"
        def status_test       = ""
    }

    stages {
        stage('Checkout Code From Git') { 
            agent {
                label "${my_server}"
            }
            steps {
                dir("${main_path}"){
                    echo "start checkout code"
                    git branch: "${branch_git}", url: "${url_git}"
                    echo "end checkout code"
                }
            }
        }
        stage('Run Test Automate') { 
            agent {
                label "${my_server}"
            }
            steps {
                script{
                    dir("${main_path}/assignment2-automate/RobotFramework"){
                        sh "~/.local/bin/robot --outputdir outputheadless/report/$(date +%Y%m%d_%H-%M-%S) tests/TestLoginHeadless.robot | tee output.log"
                        // sh "./run_robot_headless.sh | tee output.log"
                        status_test = checkResult()
                    }
                }

            }
        }
        stage('Send Result To Jenkins') { 
            agent {
                label "${my_server}"
            }
            steps {
                echo "Result: ${status_test}"

            }
        }
    }
    post {
        always {
            node("${my_server}"){
                sh "rm -rf ${main_path}/*"
            }
        }
        success {
            echo "Test END"
        }
    }

}

def checkResult() {
    // Extract the "0 failed" or similar status from the test summary
    def testSummary = sh(script: "grep -E '[0-9]+ tests, [0-9]+ passed, [0-9]+ failed' output.log", returnStdout: true).trim()
    
    echo "Test Summary: ${testSummary}"

    // Check if there are any failed tests
    if (testSummary.contains("0 failed")) {
        env.result_automate = "PASS"
        echo "Test Automation Passed: ${env.result_automate}"
    } else {
        env.result_automate = "FAIL"
        echo "Test Automation Failed: ${env.result_automate}"
    }

    return env.result_automate
}